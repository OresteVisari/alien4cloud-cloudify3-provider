## Compute nodes
#foreach($matchedPaaSCompute in ${deployment.computes})
  ${matchedPaaSCompute.paaSNodeTemplate.id}:
    type: ${util.tryToMapComputeType($matchedPaaSCompute.paaSNodeTemplate.indexedToscaElement, "${mapping.generatedTypePrefix}.openstack.Compute")}
    properties:
      image: ${matchedPaaSCompute.paaSComputeTemplate.image}
      flavor: ${matchedPaaSCompute.paaSComputeTemplate.flavor}
#if(${matchedPaaSCompute.paaSComputeTemplate.availabilityZone} || ${cloud.cloudInit})
      server:
#if(${matchedPaaSCompute.paaSComputeTemplate.availabilityZone})
        availability_zone: ${matchedPaaSCompute.paaSComputeTemplate.availabilityZone}
#end
#if(${cloud.cloudInit})
        userdata: |
${util.formatTextWithIndentation(10, ${cloud.cloudInit})}
#end
#end
    instances:
#if(${matchedPaaSCompute.paaSNodeTemplate.scalingPolicy.initialInstances})
      deploy: ${matchedPaaSCompute.paaSNodeTemplate.scalingPolicy.initialInstances}
#else
      deploy: 1
#end
#set( $hasFloatingIp = ${util.hasMatchedNetwork(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.externalNetworks})} )
#set( $hasInternalNetwork = ${util.hasMatchedNetwork(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.internalNetworks})} )
#if($hasFloatingIp || $hasInternalNetwork)
    relationships:
#if($hasInternalNetwork)
#foreach($internalNetworkNode in ${util.getInternalNetworks(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.internalNetworks})})
#set( $network = ${internalNetworkNode.paaSResourceTemplate} )
      - target: ${internalNetworkNode.id}
        type: cloudify.relationships.connected_to
      - target: ${internalNetworkNode.id}_subnet
        type: cloudify.relationships.depends_on
#end
#end
#if($hasFloatingIp)
      - target: ${mapping.generatedNodePrefix}_floating_ip_${matchedPaaSCompute.paaSNodeTemplate.id}
        type: ${providerMapping.nativeTypes.floatingIpRelationshipType}
  ${mapping.generatedNodePrefix}_floating_ip_${matchedPaaSCompute.paaSNodeTemplate.id}:
    type: ${mapping.generatedTypePrefix}.openstack.FloatingIP
    properties:
      floatingip:
        floating_network_name: ${util.getExternalNetworkName(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.externalNetworks})}
#end
#end
#end

## Network nodes
#foreach($matchedNetwork in ${deployment.internalNetworks})
#set( $network = ${matchedNetwork.paaSResourceTemplate} )
  ${matchedNetwork.paaSNodeTemplate.id}:
    type: ${util.tryToMapNetworkType($matchedNetwork.paaSNodeTemplate.indexedToscaElement, "${mapping.generatedTypePrefix}.openstack.Network")}
    properties:
      resource_id: ${network.id}
  ${matchedNetwork.paaSNodeTemplate.id}_subnet:
    type: ${providerMapping.nativeTypes.subnetType}
    properties:
      resource_id: ${network.id}_subnet
      subnet:
        ip_version: ${network.ipVersion}
        cidr: ${network.cidr}
    relationships:
      - target: ${matchedNetwork.paaSNodeTemplate.id}
        type: cloudify.relationships.contained_in
#end

## volume nodes
#foreach($matchedVolume in ${deployment.volumes})
#set($externalVolumeId = $util.getExternalVolumeId($matchedVolume))
#if(${util.isConfiguredVolume(${matchedVolume.paaSNodeTemplate})})
  ${mapping.generatedNodePrefix}_file_system_${matchedVolume.paaSNodeTemplate.id}:
    type: ${mapping.generatedTypePrefix}.cloudify.nodes.FileSystem
    properties:
#if($externalVolumeId)
      use_external_resource: true
#end
#if(${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.file_system.value})
      fs_type: "${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.file_system.value}"
#end
#if(${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.location.value})
      fs_mount_path: "${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.location.value}"
#end
    relationships:
      - type: ${mapping.generatedTypePrefix}.cloudify.relationships.file_system_depends_on_volume
        target: ${matchedVolume.paaSNodeTemplate.id}
      - type: ${mapping.generatedTypePrefix}.cloudify.relationships.file_system_contained_in_compute
        target: ${matchedVolume.paaSNodeTemplate.parent.id}
#end
  ${matchedVolume.paaSNodeTemplate.id}:
    type: ${util.tryToMapVolumeType($matchedVolume.paaSNodeTemplate.indexedToscaElement, "${mapping.generatedTypePrefix}.openstack.Volume")}
    properties:
#if($externalVolumeId)
      resource_id: $externalVolumeId
      use_external_resource: true
#end
#if(${matchedVolume.paaSResourceTemplate.device})
      device_name: ${matchedVolume.paaSResourceTemplate.device}
#end
#if(${matchedVolume.paaSResourceTemplate.size})
      volume:
        size: ${util.formatVolumeSize(${matchedVolume.paaSResourceTemplate.size})}
#set($volumeAvailabilityZone = $util.getVolumeAvailabilityZone($matchedVolume))
#if($volumeAvailabilityZone)
        availability_zone: $volumeAvailabilityZone
#end
#end
#if(!(${util.isDeletableVolumeType(${matchedVolume.paaSNodeTemplate.indexedToscaElement})} || ${util.hasDeletableBlockstorageOptionEnabled($deployment)}))
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}
#end
    relationships:
      - target: ${matchedVolume.paaSNodeTemplate.parent.id}
        type: ${providerMapping.nativeTypes.volumeAttachRelationshipType}
#end