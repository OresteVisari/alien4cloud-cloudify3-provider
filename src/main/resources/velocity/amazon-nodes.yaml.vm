## Compute nodes
#foreach($matchedPaaSCompute in ${deployment.computes})
  ${matchedPaaSCompute.paaSNodeTemplate.id}:
    type: ${util.tryToMapComputeType($matchedPaaSCompute.paaSNodeTemplate.indexedToscaElement, "${mapping.generatedTypePrefix}.amazon.Compute")}
    properties:
#if(${util.mapHasEntries(${matchedPaaSCompute.paaSNodeTemplate.nodeTemplate.properties})})
      ${mapping.nativePropertyParent}:
#foreach($property in ${matchedPaaSCompute.paaSNodeTemplate.nodeTemplate.properties.entrySet()})
#if($property.value.value)
        $property.getKey(): "$property.value.value"
#end
#end
#end
      image_id: ${matchedPaaSCompute.paaSComputeTemplate.image}
      instance_type: ${matchedPaaSCompute.paaSComputeTemplate.flavor}
    instances:
      deploy: 1
#set( $hasFloatingIp = ${util.hasMatchedNetwork(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.externalNetworks})} )
#set( $hasInternalNetwork = ${util.hasMatchedNetwork(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.internalNetworks})} )
#if($hasFloatingIp || $hasInternalNetwork)
    relationships:
#if($hasInternalNetwork)
#foreach($internalNetworkNode in ${util.getInternalNetworks(${matchedPaaSCompute.paaSNodeTemplate.networkNodes}, ${deployment.internalNetworks})})
#set( $network = ${internalNetworkNode.paaSResourceTemplate} )
      - target: ${internalNetworkNode.id}
        type: cloudify.relationships.connected_to
      - target: ${internalNetworkNode.id}_subnet
        type: cloudify.relationships.depends_on
#end
#end
#if($hasFloatingIp)
      - target: ${mapping.generatedNodePrefix}_floating_ip_${matchedPaaSCompute.paaSNodeTemplate.id}
        type: ${providerMapping.nativeTypes.floatingIpRelationshipType}
  ${mapping.generatedNodePrefix}_floating_ip_${matchedPaaSCompute.paaSNodeTemplate.id}:
    type: ${mapping.generatedTypePrefix}.amazon.FloatingIP
#end
#end
#end

## Network nodes
#foreach($matchedNetwork in ${deployment.internalNetworks})
#set( $network = ${matchedNetwork.paaSResourceTemplate} )
  ${matchedNetwork.paaSNodeTemplate.id}:
    type: ${util.tryToMapNetworkType($matchedNetwork.paaSNodeTemplate.indexedToscaElement, "${mapping.generatedTypePrefix}.amazon.Network")}
    properties:
      resource_id: ${network.id}
#if(${util.mapHasEntries(${matchedNetwork.paaSNodeTemplate.nodeTemplate.properties})})
      ${mapping.nativePropertyParent}:
#foreach($property in ${matchedNetwork.paaSNodeTemplate.nodeTemplate.properties.entrySet()})
#if($property.value.value)
        $property.getKey(): "$property.value.value"
#end
#end
#end
  ${matchedNetwork.paaSNodeTemplate.id}_subnet:
    type: ${providerMapping.nativeTypes.subnetType}
    properties:
      resource_id: ${network.id}_subnet
      subnet:
        ip_version: ${network.ipVersion}
        cidr: ${network.cidr}
    relationships:
      - target: ${matchedNetwork.paaSNodeTemplate.id}
        type: cloudify.relationships.contained_in
#end

## volume nodes
#foreach($matchedVolume in ${deployment.volumes})
#set($externalVolumeId = $util.getExternalVolumeId($matchedVolume))
#if(${util.isConfiguredVolume(${matchedVolume.paaSNodeTemplate})})
  ${mapping.generatedNodePrefix}_file_system_${matchedVolume.paaSNodeTemplate.id}:
    type: ${mapping.generatedTypePrefix}.cloudify.nodes.FileSystem
    properties:
#if($externalVolumeId)
      use_external_resource: true
#end
#if(${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.file_system})
      fs_type: ${util.formatNodeOperationInput($matchedVolume.paaSNodeTemplate, ${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.file_system})}
#end
#if(${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.location})
      fs_mount_path: ${util.formatNodeOperationInput($matchedVolume.paaSNodeTemplate, ${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.location})}
#end
    relationships:
      - type: ${mapping.generatedTypePrefix}.cloudify.relationships.file_system_depends_on_volume
        target: ${matchedVolume.paaSNodeTemplate.id}
      - type: ${mapping.generatedTypePrefix}.cloudify.relationships.file_system_contained_in_compute
        target: ${matchedVolume.paaSNodeTemplate.parent.id}
#end
  ${matchedVolume.paaSNodeTemplate.id}:
    type: ${util.tryToMapVolumeType($matchedVolume.paaSNodeTemplate.indexedToscaElement, "${mapping.generatedTypePrefix}.amazon.Volume")}
    properties:
#if(${util.mapHasEntries(${matchedVolume.paaSNodeTemplate.nodeTemplate.properties})})
      ${mapping.nativePropertyParent}:
#foreach($property in ${matchedVolume.paaSNodeTemplate.nodeTemplate.properties.entrySet()})
#if($property.value.value)
        $property.getKey(): "$property.value.value"
#end
#end
#end
#if($externalVolumeId)
      resource_id: $externalVolumeId
      use_external_resource: true
#end
#if(${matchedVolume.paaSResourceTemplate.device})
      device_name: ${matchedVolume.paaSResourceTemplate.device}
#end
#if(${matchedVolume.paaSResourceTemplate.size})
      volume:
        size: ${util.formatVolumeSize(${matchedVolume.paaSResourceTemplate.size})}
#set($volumeAvailabilityZone = $util.getVolumeAvailabilityZone($matchedVolume))
#if($volumeAvailabilityZone)
        availability_zone: $volumeAvailabilityZone
#end
#end
#if(!${util.isDeletableVolumeType(${matchedVolume.paaSNodeTemplate.indexedToscaElement})})
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}
#end
    relationships:
      - target: ${matchedVolume.paaSNodeTemplate.parent.id}
        type: ${providerMapping.nativeTypes.volumeAttachRelationshipType}
#end