#*
This template is used to generate cloudify 3 recipe from alien model
- $mapping --> contains specific IaaS mapping loaded from src/main/resources/mapping/$provider.yaml
- $cloud --> contains alien4cloud.paas.cloudify3.configuration.CloudConfiguration instance
- $deployment --> contains Alien's deployment and types
- $provider_types --> template file for specific provider types
*#
tosca_definitions_version: $mapping.dslVersion

imports:
  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml
#foreach($import in $providerMapping.imports)
  - $import
#end

node_types:

#parse("$provider_types_file")

#if($util.hasConfiguredVolume($deployment.volumes))
  ${mapping.generatedTypePrefix}.cloudify.nodes.FileSystem:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Enables the use of already formatted volumes.
        type: boolean
        default: false
      partition_type:
        description: >
          The partition type. 83 is a Linux Native Partition.
        type: integer
        default: 83
      fs_type:
        description: >
          The type of the File System.
          Supported types are [ext2, ext3, ext4, fat, ntfs, swap]
        type: string
        default: ext4
      fs_mount_path:
        description: >
          The path of the mount point.
        type: string
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: cfy3_native/volume/mkfs.sh
#end
#if($util.mapHasEntries($deployment.allDeploymentArtifacts))
  ${mapping.generatedTypePrefix}.cloudify.nodes.DeploymentArtifacts:
    derived_from: cloudify.nodes.Root
    properties:
      artifacts:
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: cfy3_native/deployment_artifacts/download_artifacts.py
#end
#if($util.collectionHasElement($deployment.nonNativesTypes))
#foreach($nonNativeType in ${deployment.nonNativesTypes})
  ${nonNativeType.elementId}:
    derived_from: $util.getDerivedFromType($nonNativeType.derivedFrom)
#if($util.mapHasEntries($nonNativeType.properties))
    properties:
#foreach($propertyEntry in ${nonNativeType.properties.entrySet()})
      $propertyEntry.key:
        type: string
#if ($propertyEntry.value.default)
        default: "$propertyEntry.value.default"
#else
        default: ""
#end
#end
#end
#end
#end

#if($util.hasConfiguredVolume($deployment.volumes) || $util.collectionHasElement($deployment.nonNativesRelationshipTypes))
relationships:
#if($util.hasConfiguredVolume($deployment.volumes))
  ${mapping.generatedTypePrefix}.cloudify.relationships.file_system_depends_on_volume:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: cfy3_native/volume/fdisk.sh
  ${mapping.generatedTypePrefix}.cloudify.relationships.file_system_contained_in_compute:
    derived_from: cloudify.relationships.contained_in
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: cfy3_native/volume/mount.sh
        unlink:
          implementation: cfy3_native/volume/unmount.sh
#end
#if($util.collectionHasElement($deployment.nonNativesRelationshipTypes))
#foreach($nonNativeRelationshipType in ${deployment.nonNativesRelationshipTypes})
  ${nonNativeRelationshipType.elementId}:
    derived_from: $util.getDerivedFromType($nonNativeRelationshipType.derivedFrom)
#end
#end
#end

node_templates:

#parse("$provider_nodes_file")

#foreach($nodeArtifactsEntry in $deployment.allDeploymentArtifacts.entrySet())
  ${mapping.generatedNodePrefix}_artifacts_for_$nodeArtifactsEntry.key:
    type: ${mapping.generatedTypePrefix}.cloudify.nodes.DeploymentArtifacts
    properties:
      artifacts:
#foreach($nodeArtifactEntry in $nodeArtifactsEntry.value.entrySet())
        $nodeArtifactEntry.key: ${nodeArtifactEntry.value.archiveName}/${nodeArtifactEntry.value.artifactRef}
#end
    relationships:
      - type: cloudify.relationships.contained_in
        target: ${util.getHost($deployment.allNodes.get($nodeArtifactsEntry.key)).id}
#end

#foreach($relationshipArtifactsEntry in $deployment.allRelationshipDeploymentArtifacts.entrySet())
  ${mapping.generatedNodePrefix}_artifacts_for_relationship_${relationshipArtifactsEntry.key.id}_from_${relationshipArtifactsEntry.key.source}_on_source:
    type: ${mapping.generatedTypePrefix}.cloudify.nodes.DeploymentArtifacts
    properties:
      artifacts:
#foreach($relationshipArtifactEntry in $relationshipArtifactsEntry.value.entrySet())
        $relationshipArtifactEntry.key: ${relationshipArtifactEntry.value.archiveName}/${relationshipArtifactEntry.value.artifactRef}
#end
    relationships:
      - type: cloudify.relationships.contained_in
        target: ${util.getHost($deployment.allNodes.get($relationshipArtifactsEntry.key.source)).id}
  ${mapping.generatedNodePrefix}_artifacts_for_relationship_${relationshipArtifactsEntry.key.id}_from_${relationshipArtifactsEntry.key.source}_on_target:
    type: ${mapping.generatedTypePrefix}.cloudify.nodes.DeploymentArtifacts
    properties:
      artifacts:
#foreach($relationshipArtifactEntry in $relationshipArtifactsEntry.value.entrySet())
        $relationshipArtifactEntry.key: ${relationshipArtifactEntry.value.archiveName}/${relationshipArtifactEntry.value.artifactRef}
#end
    relationships:
      - type: cloudify.relationships.contained_in
        target: ${util.getHost($deployment.allNodes.get($relationshipArtifactsEntry.key.target)).id}
#end

#foreach($nonNativeNode in $deployment.nonNatives)
  $nonNativeNode.id:
    type: $nonNativeNode.indexedToscaElement.elementId
    instances:
      deploy: 1
#if($util.mapHasEntries($nonNativeNode.nodeTemplate.properties))
    properties:
#foreach($property in $nonNativeNode.nodeTemplate.properties.entrySet())
#if($property.value)
      $property.key: "$util.formatNodeOperationInput($nonNativeNode, $property.value)"
#end
#end
#end
#set( $nodeInterfaces = $util.getNodeInterfaces($nonNativeNode) )
#if($util.mapHasEntries($nodeInterfaces))
    interfaces:
#foreach($interfaceEntry in $nodeInterfaces.entrySet())
      $util.tryToMapToCloudifyInterface($interfaceEntry.key):
#foreach($operationEntry in ${interfaceEntry.value.operations.entrySet()})
#if($util.operationHasInputParameters($operationEntry.value))
        $operationEntry.key:
          implementation: ${operationEntry.value.implementationArtifact.archiveName}/${operationEntry.value.implementationArtifact.artifactRef}
          inputs:
            process:
              env:
#foreach($inputEntry in $operationEntry.value.inputParameters.entrySet())
                $inputEntry.key: $util.formatNodeOperationInput($nonNativeNode, $inputEntry.value)
#end
#else
        ${operationEntry.key}: ${operationEntry.value.implementationArtifact.archiveName}/${operationEntry.value.implementationArtifact.artifactRef}
#end
#end
#end
#end
#set( $relationshipTemplates = $util.getSourceRelationships($nonNativeNode) )
#set( $attachedVolume = $util.getConfiguredAttachedVolume($nonNativeNode) )
#set( $hasDeploymentArtifacts = $deployment.allDeploymentArtifacts.containsKey(${nonNativeNode.id}) )
#set( $allRelationshipWithDeploymentArtifacts = ${util.getAllRelationshipWithDeploymentArtifacts($nonNativeNode)})
#if($util.collectionHasElement($relationshipTemplates) || $attachedVolume || $hasDeploymentArtifacts)
    relationships:
#if($util.collectionHasElement($allRelationshipWithDeploymentArtifacts))
#foreach($relationship in $allRelationshipWithDeploymentArtifacts)
      - target: ${mapping.generatedNodePrefix}_artifacts_for_relationship_${relationship.id}_from_${relationship.source}_on_target
        type: cloudify.relationships.depends_on
#end
#end
#if($attachedVolume)
      - target: ${mapping.generatedNodePrefix}_file_system_${attachedVolume.id}
        type: cloudify.relationships.depends_on
#end
#if($hasDeploymentArtifacts)
      - target: ${mapping.generatedNodePrefix}_artifacts_for_${nonNativeNode.id}
        type: cloudify.relationships.depends_on
#end
#foreach($relationship in $relationshipTemplates)
#set( $relationshipHasDeploymentArtifacts = $util.relationshipHasDeploymentArtifacts($relationship) )
#if($relationshipHasDeploymentArtifacts)
      - target: ${mapping.generatedNodePrefix}_artifacts_for_relationship_${relationship.id}_from_${relationship.source}_on_source
        type: cloudify.relationships.depends_on
#end
      - target: $relationship.relationshipTemplate.target
        type: $util.tryToMapToCloudifyType($relationship.indexedToscaElement.elementId)
#set( $relationshipInterfaces = $util.getRelationshipInterfaces($relationship) )
#if($util.mapHasEntries($relationshipInterfaces))
#set( $relationshipSourceInterfaces = $util.getRelationshipSourceInterfaces($relationshipInterfaces) )
#if($util.mapHasEntries($relationshipSourceInterfaces))
        source_interfaces:
#foreach($interfaceEntry in $relationshipSourceInterfaces.entrySet())
          $util.tryToMapToCloudifyRelationshipInterface($interfaceEntry.key):
#foreach($operationEntry in ${interfaceEntry.value.operations.entrySet()})
#if($util.operationHasInputParameters($operationEntry.value))
            $util.tryToMapToCloudifyRelationshipSourceInterfaceOperation($operationEntry.key):
              implementation: $operationEntry.value.implementationArtifact.archiveName/$operationEntry.value.implementationArtifact.artifactRef
              inputs:
                process:
                  env:
#foreach($inputEntry in $operationEntry.value.inputParameters.entrySet())
                    $inputEntry.key: $util.formatRelationshipOperationInput($relationship, $inputEntry.value, true)
#end
#else
                    $util.tryToMapToCloudifyRelationshipSourceInterfaceOperation($operationEntry.key): $operationEntry.value.implementationArtifact.archiveName/$operationEntry.value.implementationArtifact.artifactRef
#end
#end
#end
#end
#set( $relationshipTargetInterfaces = $util.getRelationshipTargetInterfaces($relationshipInterfaces) )
#if($util.mapHasEntries($relationshipTargetInterfaces))
        target_interfaces:
#foreach($interfaceEntry in $relationshipTargetInterfaces.entrySet())
          $util.tryToMapToCloudifyRelationshipInterface($interfaceEntry.key):
#foreach($operationEntry in ${interfaceEntry.value.operations.entrySet()})
#if($util.operationHasInputParameters($operationEntry.value))
            $util.tryToMapToCloudifyRelationshipTargetInterfaceOperation($operationEntry.key):
              implementation: $operationEntry.value.implementationArtifact.archiveName/$operationEntry.value.implementationArtifact.artifactRef
              inputs:
                process:
                  env:
#foreach($inputEntry in $operationEntry.value.inputParameters.entrySet())
                    $inputEntry.key: $util.formatRelationshipOperationInput($relationship, $inputEntry.value, false)
#end
#else
                    $util.tryToMapToCloudifyRelationshipTargetInterfaceOperation($operationEntry.key): $operationEntry.value.implementationArtifact.archiveName/$operationEntry.value.implementationArtifact.artifactRef
#end
#end
#end
#end
#end
#end
#end
#end