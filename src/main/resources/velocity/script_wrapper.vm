#macro(deploymentArtifactEntry $artifactName $artifactPath)
#if($util.isArtifactDirectory($artifactPath))
#set ( $nodeArtifactChildrenPaths = $util.listArtifactDirectory($artifactPath) )
#if($util.mapHasEntries($nodeArtifactChildrenPaths))
    "$artifactName": [
#foreach($nodeArtifactChildPathEntry in $nodeArtifactChildrenPaths.entrySet())
        {
            "relative_path": "$nodeArtifactChildPathEntry.key",
            "absolute_path": "$nodeArtifactChildPathEntry.value"
        }
#if($foreach.count < $nodeArtifactChildrenPaths.size())
        ,
#end
#end
    ]
#end
#else
    "$artifactName": "$artifactPath"
#end
#end

#include("script_wrapper_static.py")

#if($util.operationHasDeploymentArtifacts($operation))
#include("download_artifacts.py")
#end

new_script_process = {
#if($util.operationHasInputParameters($operation))
    "env": {
#foreach($inputEntry in $operation.inputParameters.entrySet())
#if($util.isFunctionPropertyValue($inputEntry.value))
        "$inputEntry.key": $util.formatFunctionPropertyValue(${operation.owner}, $inputEntry.value)
#else
        "$inputEntry.key": "$inputEntry.value.value"
#end
#if($foreach.count < $operation.inputParameters.size())
        ,
#end
#end
    }
#end
}

#if($util.operationHasDeploymentArtifacts($operation))
node_artifacts = {
#foreach($nodeArtifactsEntry in $operation.allDeploymentArtifacts.entrySet())
#foreach($nodeArtifactEntry in $nodeArtifactsEntry.value.entrySet())
#set( $nodeArtifactPath = ${util.getArtifactPath(${nodeArtifactsEntry.key}, ${nodeArtifactEntry.key}, ${nodeArtifactEntry.value})} )
#deploymentArtifactEntry($nodeArtifactEntry.key, $nodeArtifactPath)
#end
#end
}

relationship_artifacts = {
#foreach($relationshipArtifactsEntry in $operation.allRelationshipDeploymentArtifacts.entrySet())
#foreach($relationshipArtifactEntry in $relationshipArtifactsEntry.value.entrySet())
#set($relationshipArtifactPath = ${util.getRelationshipArtifactPath(${relationshipArtifactsEntry.key.source}, ${relationshipArtifactsEntry.key.id}, ${relationshipArtifactEntry.key}, ${relationshipArtifactEntry.value})} )
#deploymentArtifactEntry($relationshipArtifactEntry.key, $relationshipArtifactPath)
#end
#end
}

artifacts = node_artifacts.copy()
artifacts.update(relationship_artifacts)

download_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'downloads')
if new_script_process.get("env") is None:
    new_script_process["env"] = {}
new_script_process["env"].update(download_artifacts(artifacts, download_dir))
#end

execute(ctx.download_resource("${util.getArtifactRelativePath(${operation.implementationArtifact})}"), new_script_process)
