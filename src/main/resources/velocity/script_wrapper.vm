#macro(deploymentArtifactEntry $artifactName $artifactPath)
#if($util.isArtifactDirectory($artifactPath))
#set ( $nodeArtifactChildrenPaths = $util.listArtifactDirectory($artifactPath) )
#if($util.mapHasEntries($nodeArtifactChildrenPaths))
    "$artifactName": [
#foreach($nodeArtifactChildPathEntry in $nodeArtifactChildrenPaths.entrySet())
        {
            "relative_path": "$nodeArtifactChildPathEntry.key",
            "absolute_path": "$nodeArtifactChildPathEntry.value"
        }
#if($foreach.count < $nodeArtifactChildrenPaths.size())
        ,
#end
#end
    ]
#end
#else
    "$artifactName": "$artifactPath"
#end
#end

#include("script_wrapper_static.py")


def get_attribute(entity, attribute_name):
#if(${providerMapping.attributes.compute.public_ip_address})
    if attribute_name == '${providerMapping.attributes.compute.public_ip_address}':
        return get_public_ip(entity)
    else:
        attribute_value = get_instance_data(entity, attribute_name, get_attribute_data)
        if attribute_value is None:
            attribute_value = get_instance_data(entity, attribute_name, get_property_data)
        return attribute_value
#else
    attribute_value = get_instance_data(entity, attribute_name, get_attribute_data)
    if attribute_value is None:
        attribute_value = get_instance_data(entity, attribute_name, get_property_data)
    return attribute_value
#end


def get_property(entity, property_name):
    return get_instance_data(entity, property_name, get_property_data)


#if(${providerMapping.attributes.compute.public_ip_address})
def get_public_ip(entity):
    host = get_host(entity)
    public_ip = host.instance.runtime_properties.get('${providerMapping.attributes.compute.public_ip_address}', None)
    if public_ip is not None:
        return public_ip
    public_ip = host.node.properties.get('${providerMapping.attributes.compute.public_ip_address}', None)
    if public_ip is not None:
        return public_ip
    if host.instance.relationships:
        for relationship in host.instance.relationships:
            if 'cloudify.relationships.connected_to' in relationship.type_hierarchy:
                if relationship.target.node.id == '${mapping.generatedTypePrefix}_floating_ip_' + host.node.id:
                    return relationship.target.instance.runtime_properties['${providerMapping.attributes.compute.public_ip_address}']
    return ""
#end


#if($util.operationHasDeploymentArtifacts($operation))
#include("download_artifacts.py")
#end

new_script_process = {
    'env': {
#foreach($inputEntry in $operation.inputParameters.entrySet())
        '$inputEntry.key': $util.formatValue(${operation.owner}, $inputEntry.value)
#if($foreach.count < $operation.inputParameters.size())
        ,
#end
#end
    }
}

#if($util.operationHasDeploymentArtifacts($operation))
node_artifacts = {
#foreach($nodeArtifactsEntry in $operation.allDeploymentArtifacts.entrySet())
#foreach($nodeArtifactEntry in $nodeArtifactsEntry.value.entrySet())
#set( $nodeArtifactPath = ${util.getArtifactPath(${nodeArtifactsEntry.key}, ${nodeArtifactEntry.key}, ${nodeArtifactEntry.value})} )
#deploymentArtifactEntry($nodeArtifactEntry.key, $nodeArtifactPath)
#end
#end
}

relationship_artifacts = {
#foreach($relationshipArtifactsEntry in $operation.allRelationshipDeploymentArtifacts.entrySet())
#foreach($relationshipArtifactEntry in $relationshipArtifactsEntry.value.entrySet())
#set($relationshipArtifactPath = ${util.getRelationshipArtifactPath(${relationshipArtifactsEntry.key.source}, ${relationshipArtifactsEntry.key.id}, ${relationshipArtifactEntry.key}, ${relationshipArtifactEntry.value})} )
#deploymentArtifactEntry($relationshipArtifactEntry.key, $relationshipArtifactPath)
#end
#end
}

artifacts = node_artifacts.copy()
artifacts.update(relationship_artifacts)

download_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'downloads')
new_script_process['env'].update(download_artifacts(artifacts, download_dir))
#end

ctx.logger.info('Operation is executed with inputs {0}'.format(inputs))
if inputs.get('process', None) is not None and inputs['process'].get('env', None) is not None:
    ctx.logger.info('Operation is executed with environment variable {0}'.format(inputs['process']['env']))
    new_script_process['env'].update(inputs['process']['env'])

operationOutputNames = None
#if(${operation.getOutputs()} && !${operation.getOutputs().isEmpty()})
operationOutputNames = '${util.getOperationOutputNames(${operation})}'
#end
parsed_output = execute(ctx.download_resource('${util.getArtifactRelativePath(${operation.implementationArtifact})}'), new_script_process, operationOutputNames)
for k,v in parsed_output['outputs'].items():
    ctx.logger.info('Output name: {0} value: {1}'.format(k, v))
    ctx.instance.runtime_properties['_a4c_OO:${operation.interfaceName}:${operation.operationName}:{0}'.format(k)] = v

#macro(setAttributes $owner $entity $attributes $context)
#if($attributes)
#foreach($attributeEntry in ${attributes.entrySet()})
#if($util.isFunctionPropertyValue($attributeEntry.value))
${entity}.runtime_properties['${attributeEntry.key}'] = ${util.formatFunctionPropertyValue($context, $owner, $attributeEntry.value)}
#elseif($util.isConcatPropertyValue($attributeEntry.value))
${entity}.runtime_properties['${attributeEntry.key}'] = ${util.formatConcatPropertyValue($context, $owner, $attributeEntry.value)}
#else
${entity}.runtime_properties['${attributeEntry.key}'] = '${attributeEntry.value.value}'
#end
#end
${entity}.update()
#end
#end

#setAttributes(${operation.owner}, "ctx.instance", $util.getNodeAttributes(${operation.owner}), "")
#if($util.isOperationOwnedByRelationship(${operation}))
#setAttributes(${util.getSourceNode(${operation.owner})}, "ctx.source.instance", $util.getSourceRelationshipAttributes(${operation.owner}), ".source")
#setAttributes(${util.getTargetNode(${operation.owner})}, "ctx.target.instance", $util.getTargetRelationshipAttributes(${operation.owner}), ".target")
#end
