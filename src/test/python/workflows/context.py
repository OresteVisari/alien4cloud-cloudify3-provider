from graph import Context
from graph import Node
from graph import Instance
from graph import Relationship


# content of this fn can be generated by workflow plugin (see workflows.py in generated blueprint)
def _build_nodes(ctx):
    # just put the generated sequence here :
    types = []
    types.append('alien.nodes.War')
    types.append('alien.nodes.LoadBalancedWebApplication')
    types.append('tosca.nodes.Root')
    node_War = _build_node(ctx, 'War', types, 1)
    types = []
    types.append('alien.nodes.Tomcat')
    types.append('tosca.nodes.WebServer')
    types.append('tosca.nodes.SoftwareComponent')
    types.append('tosca.nodes.Root')
    node_Tomcat = _build_node(ctx, 'Tomcat', types, 1)
    types = []
    types.append('tosca.nodes.Compute')
    types.append('tosca.nodes.Root')
    node_WebServer = _build_node(ctx, 'WebServer', types, 1)
    types = []
    types.append('tosca.nodes.Compute')
    types.append('tosca.nodes.Root')
    node_LoadBalancerServer = _build_node(ctx, 'LoadBalancerServer', types, 1)
    types = []
    types.append('tosca.nodes.Network')
    types.append('tosca.nodes.Root')
    node_Internet = _build_node(ctx, 'Internet', types, 1)
    types = []
    types.append('alien.nodes.Java')
    types.append('tosca.nodes.SoftwareComponent')
    types.append('tosca.nodes.Root')
    node_Java = _build_node(ctx, 'Java', types, 1)
    types = []
    types.append('alien.nodes.ApacheLoadBalancer')
    types.append('alien.nodes.LoadBalancer')
    types.append('tosca.nodes.SoftwareComponent')
    types.append('tosca.nodes.Root')
    node_ApacheLoadBalancer = _build_node(ctx, 'ApacheLoadBalancer', types, 1)
    _add_relationship(node_War, node_Tomcat)
    _add_relationship(node_War, node_ApacheLoadBalancer)
    _add_relationship(node_Tomcat, node_Java)
    _add_relationship(node_Tomcat, node_WebServer)
    _add_relationship(node_LoadBalancerServer, node_Internet)
    _add_relationship(node_Java, node_WebServer)
    _add_relationship(node_ApacheLoadBalancer, node_LoadBalancerServer)


def build_context():
    ctx = Context()
    _build_nodes(ctx)
    return ctx


def _build_node(ctx, node_id, node_type, instance_count):
    node = Node(node_id, node_type)
    _build_intances(node, instance_count)
    ctx.nodes.append(node)
    return node


def _build_intances(node, instance_count):
    i = 0
    while i < instance_count:
        instance_id = node.id + str(i)
        instance = Instance(instance_id, node)
        node.instances.append(instance)
        i += 1


def _add_relationship(node, target_node):
    for instance in node.instances:
        instance.relationships.append(Relationship(instance, target_node))
