from cloudify.decorators import workflow
from cloudify.workflows import ctx
from cloudify.workflows import tasks as workflow_tasks
from utils import set_state_task
from utils import operation_task
from utils import link_tasks
from utils import CustomContext


@workflow
def a4c_install(**kwargs):
    graph = ctx.graph_mode()
    custom_context = CustomContext(ctx)
    ctx.internal.send_workflow_event(
        event_type='workflow_started',
        message="Starting A4C generated '{0}' workflow execution".format(ctx.workflow_id))
    _a4c_install(ctx, graph, custom_context)
    return graph.execute()


@workflow
def a4c_uninstall(**kwargs):
    graph = ctx.graph_mode()
    custom_context = CustomContext(ctx)
    ctx.internal.send_workflow_event(
        event_type='workflow_started',
        message="Starting A4C generated '{0}' workflow execution".format(ctx.workflow_id))
    _a4c_uninstall(ctx, graph, custom_context)
    return graph.execute()


def _a4c_install(ctx, graph, custom_context):
    #  following code can be pasted in src/test/python/workflows/tasks.py for simulation
    operation_task(ctx, graph, 'Compute', 'cloudify.interfaces.lifecycle.configure', 'configure_Compute', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'configuring', 'Mysql_configuring', custom_context)
    operation_task(ctx, graph, 'Mysql', 'cloudify.interfaces.lifecycle.create', 'create_Mysql', custom_context)
    set_state_task(ctx, graph, 'Compute', 'starting', 'Compute_starting', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'configured', '_a4c_file_system_BlockStorage_configured', custom_context)
    operation_task(ctx, graph, 'Mysql', 'cloudify.interfaces.lifecycle.configure', 'configure_Mysql', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'starting', 'BlockStorage_starting', custom_context)
    operation_task(ctx, graph, '_a4c_file_system_BlockStorage', 'cloudify.interfaces.lifecycle.configure', 'configure__a4c_file_system_BlockStorage', custom_context)
    set_state_task(ctx, graph, 'Compute', 'configured', 'Compute_configured', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'created', 'Mysql_created', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'starting', '_a4c_file_system_BlockStorage_starting', custom_context)
    set_state_task(ctx, graph, 'Compute', 'started', 'Compute_started', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'creating', 'BlockStorage_creating', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'creating', 'Mysql_creating', custom_context)
    set_state_task(ctx, graph, 'Compute', 'created', 'Compute_created', custom_context)
    operation_task(ctx, graph, 'Compute', 'cloudify.interfaces.lifecycle.create', 'create_Compute', custom_context)
    operation_task(ctx, graph, '_a4c_file_system_BlockStorage', 'cloudify.interfaces.lifecycle.start', 'start__a4c_file_system_BlockStorage', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'initial', '_a4c_file_system_BlockStorage_initial', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'starting', 'Mysql_starting', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'configured', 'Mysql_configured', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'configuring', 'BlockStorage_configuring', custom_context)
    operation_task(ctx, graph, 'BlockStorage', 'cloudify.interfaces.lifecycle.start', 'start_BlockStorage', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'started', 'Mysql_started', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'started', '_a4c_file_system_BlockStorage_started', custom_context)
    operation_task(ctx, graph, 'Compute', 'cloudify.interfaces.lifecycle.start', 'start_Compute', custom_context)
    operation_task(ctx, graph, '_a4c_file_system_BlockStorage', 'cloudify.interfaces.lifecycle.create', 'create__a4c_file_system_BlockStorage', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'creating', '_a4c_file_system_BlockStorage_creating', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'created', '_a4c_file_system_BlockStorage_created', custom_context)
    set_state_task(ctx, graph, 'Compute', 'initial', 'Compute_initial', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'initial', 'Mysql_initial', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'created', 'BlockStorage_created', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'initial', 'BlockStorage_initial', custom_context)
    set_state_task(ctx, graph, 'Compute', 'configuring', 'Compute_configuring', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'configured', 'BlockStorage_configured', custom_context)
    operation_task(ctx, graph, 'BlockStorage', 'cloudify.interfaces.lifecycle.create', 'create_BlockStorage', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'started', 'BlockStorage_started', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'configuring', '_a4c_file_system_BlockStorage_configuring', custom_context)
    set_state_task(ctx, graph, 'Compute', 'creating', 'Compute_creating', custom_context)
    operation_task(ctx, graph, 'BlockStorage', 'cloudify.interfaces.lifecycle.configure', 'configure_BlockStorage', custom_context)
    operation_task(ctx, graph, 'Mysql', 'cloudify.interfaces.lifecycle.start', 'start_Mysql', custom_context)
    link_tasks(graph, 'configure_Compute', 'Compute_configuring', custom_context)
    link_tasks(graph, 'Mysql_configuring', '_a4c_file_system_BlockStorage_started', custom_context)
    link_tasks(graph, 'Mysql_configuring', 'Mysql_created', custom_context)
    link_tasks(graph, 'create_Mysql', 'Mysql_creating', custom_context)
    link_tasks(graph, 'Compute_starting', 'Compute_configured', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_configured', 'configure__a4c_file_system_BlockStorage', custom_context)
    link_tasks(graph, 'configure_Mysql', 'Mysql_configuring', custom_context)
    link_tasks(graph, 'BlockStorage_starting', 'BlockStorage_configured', custom_context)
    link_tasks(graph, 'configure__a4c_file_system_BlockStorage', '_a4c_file_system_BlockStorage_configuring', custom_context)
    link_tasks(graph, 'Compute_configured', 'configure_Compute', custom_context)
    link_tasks(graph, 'Mysql_created', 'create_Mysql', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_starting', '_a4c_file_system_BlockStorage_configured', custom_context)
    link_tasks(graph, 'Compute_started', 'start_Compute', custom_context)
    link_tasks(graph, 'BlockStorage_creating', 'BlockStorage_initial', custom_context)
    link_tasks(graph, 'Mysql_creating', 'Mysql_initial', custom_context)
    link_tasks(graph, 'Compute_created', 'create_Compute', custom_context)
    link_tasks(graph, 'create_Compute', 'Compute_creating', custom_context)
    link_tasks(graph, 'start__a4c_file_system_BlockStorage', '_a4c_file_system_BlockStorage_starting', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_initial', 'Compute_started', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_initial', 'BlockStorage_started', custom_context)
    link_tasks(graph, 'Mysql_starting', 'Mysql_configured', custom_context)
    link_tasks(graph, 'Mysql_configured', 'configure_Mysql', custom_context)
    link_tasks(graph, 'BlockStorage_configuring', 'BlockStorage_created', custom_context)
    link_tasks(graph, 'BlockStorage_configuring', 'Compute_started', custom_context)
    link_tasks(graph, 'start_BlockStorage', 'BlockStorage_starting', custom_context)
    link_tasks(graph, 'Mysql_started', 'start_Mysql', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_started', 'start__a4c_file_system_BlockStorage', custom_context)
    link_tasks(graph, 'start_Compute', 'Compute_starting', custom_context)
    link_tasks(graph, 'create__a4c_file_system_BlockStorage', '_a4c_file_system_BlockStorage_creating', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_creating', '_a4c_file_system_BlockStorage_initial', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_created', 'create__a4c_file_system_BlockStorage', custom_context)
    link_tasks(graph, 'Mysql_initial', 'Compute_started', custom_context)
    link_tasks(graph, 'BlockStorage_created', 'create_BlockStorage', custom_context)
    link_tasks(graph, 'Compute_configuring', 'BlockStorage_created', custom_context)
    link_tasks(graph, 'Compute_configuring', 'Compute_created', custom_context)
    link_tasks(graph, 'BlockStorage_configured', 'configure_BlockStorage', custom_context)
    link_tasks(graph, 'create_BlockStorage', 'BlockStorage_creating', custom_context)
    link_tasks(graph, 'BlockStorage_started', 'start_BlockStorage', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_configuring', '_a4c_file_system_BlockStorage_created', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_configuring', 'Mysql_created', custom_context)
    link_tasks(graph, 'Compute_creating', 'Compute_initial', custom_context)
    link_tasks(graph, 'configure_BlockStorage', 'BlockStorage_configuring', custom_context)
    link_tasks(graph, 'start_Mysql', 'Mysql_starting', custom_context)


def _a4c_uninstall(ctx, graph, custom_context):
    #  following code can be pasted in src/test/python/workflows/tasks.py for simulation
    operation_task(ctx, graph, 'Compute', 'cloudify.interfaces.lifecycle.delete', 'delete_Compute', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'deleted', 'Mysql_deleted', custom_context)
    set_state_task(ctx, graph, 'Compute', 'stopped', 'Compute_stopped', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'stopping', 'BlockStorage_stopping', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'deleted', '_a4c_file_system_BlockStorage_deleted', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'deleted', 'BlockStorage_deleted', custom_context)
    operation_task(ctx, graph, '_a4c_file_system_BlockStorage', 'cloudify.interfaces.lifecycle.stop', 'stop__a4c_file_system_BlockStorage', custom_context)
    operation_task(ctx, graph, 'BlockStorage', 'cloudify.interfaces.lifecycle.delete', 'delete_BlockStorage', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'deleting', 'Mysql_deleting', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'stopping', '_a4c_file_system_BlockStorage_stopping', custom_context)
    operation_task(ctx, graph, 'BlockStorage', 'cloudify.interfaces.lifecycle.stop', 'stop_BlockStorage', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'deleting', '_a4c_file_system_BlockStorage_deleting', custom_context)
    set_state_task(ctx, graph, 'Compute', 'deleted', 'Compute_deleted', custom_context)
    set_state_task(ctx, graph, 'Compute', 'stopping', 'Compute_stopping', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'deleting', 'BlockStorage_deleting', custom_context)
    set_state_task(ctx, graph, '_a4c_file_system_BlockStorage', 'stopped', '_a4c_file_system_BlockStorage_stopped', custom_context)
    operation_task(ctx, graph, '_a4c_file_system_BlockStorage', 'cloudify.interfaces.lifecycle.delete', 'delete__a4c_file_system_BlockStorage', custom_context)
    set_state_task(ctx, graph, 'Compute', 'deleting', 'Compute_deleting', custom_context)
    operation_task(ctx, graph, 'Compute', 'cloudify.interfaces.lifecycle.stop', 'stop_Compute', custom_context)
    set_state_task(ctx, graph, 'BlockStorage', 'stopped', 'BlockStorage_stopped', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'stopped', 'Mysql_stopped', custom_context)
    set_state_task(ctx, graph, 'Mysql', 'stopping', 'Mysql_stopping', custom_context)
    link_tasks(graph, 'delete_Compute', 'Compute_deleting', custom_context)
    link_tasks(graph, 'Mysql_deleted', 'Mysql_deleting', custom_context)
    link_tasks(graph, 'Compute_stopped', 'stop_Compute', custom_context)
    link_tasks(graph, 'BlockStorage_stopping', 'Compute_deleted', custom_context)
    link_tasks(graph, 'BlockStorage_stopping', '_a4c_file_system_BlockStorage_deleted', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_deleted', 'delete__a4c_file_system_BlockStorage', custom_context)
    link_tasks(graph, 'BlockStorage_deleted', 'delete_BlockStorage', custom_context)
    link_tasks(graph, 'stop__a4c_file_system_BlockStorage', '_a4c_file_system_BlockStorage_stopping', custom_context)
    link_tasks(graph, 'delete_BlockStorage', 'BlockStorage_deleting', custom_context)
    link_tasks(graph, 'Mysql_deleting', 'Mysql_stopped', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_stopping', 'Mysql_deleted', custom_context)
    link_tasks(graph, 'stop_BlockStorage', 'BlockStorage_stopping', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_deleting', '_a4c_file_system_BlockStorage_stopped', custom_context)
    link_tasks(graph, 'Compute_deleted', 'delete_Compute', custom_context)
    link_tasks(graph, 'Compute_stopping', 'Mysql_deleted', custom_context)
    link_tasks(graph, 'Compute_stopping', '_a4c_file_system_BlockStorage_deleted', custom_context)
    link_tasks(graph, 'BlockStorage_deleting', 'BlockStorage_stopped', custom_context)
    link_tasks(graph, '_a4c_file_system_BlockStorage_stopped', 'stop__a4c_file_system_BlockStorage', custom_context)
    link_tasks(graph, 'delete__a4c_file_system_BlockStorage', '_a4c_file_system_BlockStorage_deleting', custom_context)
    link_tasks(graph, 'Compute_deleting', 'Compute_stopped', custom_context)
    link_tasks(graph, 'stop_Compute', 'Compute_stopping', custom_context)
    link_tasks(graph, 'BlockStorage_stopped', 'stop_BlockStorage', custom_context)
    link_tasks(graph, 'Mysql_stopped', 'Mysql_stopping', custom_context)


#following code can be pasted in src/test/python/workflows/context.py for simulation
#def _build_nodes(ctx):
    #types = []
    #types.append('alien.nodes.ConfigurableBlockStorage')
    #types.append('tosca.nodes.BlockStorage')
    #types.append('tosca.nodes.Root')
    #node_BlockStorage = _build_node(ctx, 'BlockStorage', types, 1)
    #types = []
    #types.append('alien.nodes.Mysql')
    #types.append('tosca.nodes.Database')
    #types.append('tosca.nodes.Root')
    #node_Mysql = _build_node(ctx, 'Mysql', types, 1)
    #types = []
    #types.append('tosca.nodes.Compute')
    #types.append('tosca.nodes.Root')
    #node_Compute = _build_node(ctx, 'Compute', types, 1)
    #_add_relationship(node_BlockStorage, node_Compute)
    #_add_relationship(node_Mysql, node_Compute)
