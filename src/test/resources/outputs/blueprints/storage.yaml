
tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.2/plugin.yaml

node_types:

  _a4c.openstack.Compute:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      _a4c_native_property:
        default: {}
      _a4c_native_type:
        default: compute


  _a4c.openstack.Volume:
    derived_from: cloudify.openstack.nodes.Volume
    properties:
      _a4c_native_property:
        default: {}
      _a4c_native_type:
        default: volume


  _a4c.cloudify.nodes.FileSystem:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Enables the use of already formatted volumes.
        type: boolean
        default: false
      partition_type:
        description: >
          The partition type. 83 is a Linux Native Partition.
        type: integer
        default: 83
      fs_type:
        description: >
          The type of the File System.
          Supported types are [ext2, ext3, ext4, fat, ntfs, swap]
        type: string
        default: ext4
      fs_mount_path:
        description: >
          The path of the mount point.
        type: string
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: _a4c_native_artifact/volume/mkfs.sh

  alien.nodes.Mysql:
    derived_from: cloudify.nodes.Database
    properties:
      db_port:
        type: string
        default: "3306"
      db_name:
        type: string
        default: "wordpress"
      db_user:
        type: string
        default: "pass"
      db_password:
        type: string
        default: "pass"
      bind_address:
        type: string
        default: "true"
      storage_path:
        type: string
        default: "/mountedStorage"

relationships:
  _a4c.cloudify.relationships.file_system_depends_on_volume:
    derived_from: cloudify.relationships.depends_on
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: _a4c_native_artifact/volume/fdisk.sh
  _a4c.cloudify.relationships.file_system_contained_in_compute:
    derived_from: cloudify.relationships.contained_in
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: _a4c_native_artifact/volume/mount.sh
        unlink:
          implementation: _a4c_native_artifact/volume/unmount.sh

node_templates:

  Compute:
    type: _a4c.openstack.Compute
    properties:
      _a4c_native_property:
        os_arch: "x86_64"
        os_type: "linux"
      server:
        image: 02ddfcbb-9534-44d7-974d-5cfd36dfbcab
        flavor: 2
    instances:
      deploy: 1


  _a4c_file_system_BlockStorage:
    type: _a4c.cloudify.nodes.FileSystem
    properties:
      fs_type: "ext4"
      fs_mount_path: "/var/mysql"
    relationships:
      - type: _a4c.cloudify.relationships.file_system_depends_on_volume
        target: BlockStorage
      - type: _a4c.cloudify.relationships.file_system_contained_in_compute
        target: Compute
  BlockStorage:
    type: _a4c.openstack.Volume
    properties:
      _a4c_native_property:
        file_system: "ext4"
        location: "/var/mysql"
      device_name: /dev/vdb
      volume:
        size: 1
    interfaces:
      cloudify.interfaces.lifecycle:
        delete: {}
    relationships:
      - target: Compute
        type: cloudify.openstack.volume_attached_to_server

  Mysql:
    type: alien.nodes.Mysql
    instances:
      deploy: 1
    properties:
      bind_address: "true"
      storage_path: "/var/mysql"
      db_port: "3306"
      db_name: "wordpress"
      db_user: "pass"
      db_password: "pass"
    interfaces:
      cloudify.interfaces.lifecycle:
        start: Mysql/tosca.interfaces.node.lifecycle.Standard/start/mysql-type/scripts/_a4c_start_mysql.py
        create: Mysql/tosca.interfaces.node.lifecycle.Standard/create/mysql-type/scripts/_a4c_install_mysql.py
    relationships:
      - target: _a4c_file_system_BlockStorage
        type: cloudify.relationships.depends_on
      - target: Compute
        type: cloudify.relationships.contained_in
